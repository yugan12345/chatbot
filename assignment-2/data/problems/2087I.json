{
    "problem_id": "2087I",
    "title": "I. Hamiltonian Partition",
    "time_limit": "4 seconds",
    "memory_limit": "512 megabytes",
    "statement": "You are given a directed acyclic graph with nn vertices and mm edges. The graph contains no cycles or multiple edges. You need to partition all the edges of this graph into Hamiltonian cycles (cycles that visit each of the nn vertices of the graph exactly once) such that each edge belongs to exactly one cycle. It is obvious that this is impossible for the original graph, so before partitioning, you must add the minimum number of edges to the graph so that such a partition exists. After adding edges, the graph may contain cycles and/or multiple edges, but it should still not have any self-loops.",
    "input_spec": "The first line contains two integers nn and mm (2≤n≤1002≤n≤100; 1≤m≤n(n−1)21≤m≤n(n−1)2). The next mm lines contain two integers xixi and yiyi in the ii-th line (1≤xi,yi≤n1≤xi,yi≤n; xi≠yixi≠yi), representing a directed edge from vertex xixi to vertex yiyi. Additional constraints on the input:",
    "output_spec": "In the first line, output a single integer kk (1≤k≤n⋅m1≤k≤n⋅m) — the number of edges you add. Then output kk lines, in the ii-th of which there should be two integers xixi and yiyi (1≤xi,yi≤n1≤xi,yi≤n; xi≠yixi≠yi), denoting the start and end of the next edge. Then in a single line, output a single integer cc (1≤c≤m1≤c≤m) — the number of Hamiltonian cycles into which you partition all the edges of the graph. In the last line, output m+km+k integers a1,a2,…,am+ka1,a2,…,am+k (1≤ai≤c1≤ai≤c), where aiai is the Hamiltonian cycle to which you assign the ii-th edge (the edges of the original graph are numbered from 11 to mm, and the new ones are from m+1m+1 to m+km+k). If there are multiple answers that minimize the number of added edges, output any of them."
}